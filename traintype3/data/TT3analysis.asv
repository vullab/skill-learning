clear all;
close all;
warning off;
sids = [1:60];
nconds = 3;
nblocks = 15;
switchblock = 10;

for i =[1:length(sids)]
    sud = sids(i);
    x = load(sprintf('p2_%d.txt', sud));
% #SubID	Block	Trial	Condition	Digit	Picture	Response	Correct_Response	Accuracy	RT	

% block trial cor rt
    data{i} = x(:,[2 3 9 10]);

% cond

    cond{i} = x(1,[4]);
end

cco = [0 0 0];
for sid = [1:length(sids)]
    cc = cond{sid};
    cco(cc) = cco(cc) + 1;
    
    correct = find((data{sid}(:,3) == 1));
    data{sid}(:,5) = (data{sid}(:,1)-1).*15+data{sid}(:,2);
    trrt{cc}(cco(cc),:) = nan(1, 750);
    trrt{cc}(cco(cc), correct) = data{sid}(correct, 4);
    for block = [1:nblocks]
        bkidx = find(data{sid}(correct,1)==block);
        rtmean{cc}(cco(cc),block) = mean(data{sid}(correct(bkidx), 4));
        thisblock = find(data{sid}(:,1)==block);
        acmean{cc}(cco(cc),block) = mean(data{sid}(thisblock, 3));
    end
end

for cc = [1:nconds]
    if(cc == -1)
        mutr{cc} = nanmean(trrt{cc}([1:4, 6:end],:));
        setr{cc} = nanstd(trrt{cc}([1:4, 6:end],:))./sqrt(cco(cc));
        mubk{cc} = nanmean(rtmean{cc}([1:4, 6:end],:));
        sebk{cc} = nanstd(rtmean{cc}([1:4, 6:end],:))./sqrt(cco(cc));
        mubkac{cc} = nanmean(acmean{cc}([1:4, 6:end],:));
        sebkac{cc} = nanstd(acmean{cc}([1:4, 6:end],:))./sqrt(cco(cc));
    else
        mutr{cc} = nanmean(trrt{cc});
        setr{cc} = nanstd(trrt{cc})./sqrt(cco(cc));
        mubk{cc} = nanmean(rtmean{cc});
        sebk{cc} = nanstd(rtmean{cc})./sqrt(cco(cc));
        mubkac{cc} = nanmean(acmean{cc});
        sebkac{cc} = nanstd(acmean{cc})./sqrt(cco(cc));
    end
end

colors = {'ro-', 'bx-', 'gs-', 'cv-'};
figure();
for cc = [1:nconds]
    plot([1:750], mutr{cc}, colors{cc});
    hold on;
end
legend('Easy positive training', 'Easy negative training', 'Full training');
ylabel('mean correct RT');
xlabel('block number');
title('Correct RT');

figure();
for cc = [1:nconds]
    errorbar([1:nblocks]+(rand(1,nblocks)-.5)./4, mubk{cc}, sebk{cc}, colors{cc});
    hold on;
end
legend('Easy positive training', 'Easy negative training', 'Full training');
ylabel('mean correct RT');
xlabel('block number');
title('Correct RT');
figure();
for cc = [1:nconds]
    errorbar([1:nblocks]+(rand(1,nblocks)-.5)./4, mubkac{cc}, sebkac{cc}, colors{cc});
    hold on;
end
legend('Easy positive training', 'Easy negative training', 'Full training');
ylabel('mean accuracy');
xlabel('block number');
title('Accuracy');

%%
figure();
% for cc = [1:4]
    rx = (rand(1,5)-.5)./3
    errorbar([11:15]+rx, mubk{1}(11:15), sebk{1}(11:15), colors{1});
%     hold on;
%     plot([11:15]+rx, mubk{1}(11:15), colors{1}, 'LineWidth', 3);
    hold on;
    rx = (rand(1,5)-.5)./3
    errorbar([11:15]+rx, mubk{2}(11:15), sebk{2}(11:15), colors{2});
%     hold on;
%     plot([11:15]+rx, mubk{2}(11:15), colors{2}, 'LineWidth', 3);
    hold on;
    rx = (rand(1,5)-.5)./3
    errorbar([11:15]+rx, mubk{3}(11:15), sebk{3}(11:15), colors{3});
%     hold on;
%     plot([11:15]+rx, mubk{3}(11:15), colors{3}, 'LineWidth', 3);
    hold on;
    rx = (rand(1,5)-.5)./3
    errorbar([11:15]+rx, mubk{3}(1:5), sebk{3}(1:5), colors{4});
%     hold on;
%     plot([11:15]+rx, mubk{3}(1:5), colors{4}, 'LineWidth', 3);
    hold on;
% end
legend('Easy positive training test blocks (11-15)', 'Easy negative training test blocks (11-15)', 'Full training blocks 11-15', 'Full training blocks 1-5');
ylabel('mean correct RT');
xlabel('block number');
%%
% print for excel
fprintf('\nC1 mean\tC2 mean\tC3 mean\tC4 mean\tC1 sder\tC2 sder\tC3 sder\tC4 sder');
for bk = [1:15];
    fprintf('\n');
    for cc = [1:nconds];
        fprintf('%4.2f\t', mubk{cc}(bk));
    end
    for cc = [1:nconds];
        fprintf('%4.2f\t', sebk{cc}(bk));
    end
end

%%


for comp = [1]
    fprintf('\n');
    fprintf('%d\n', comp);
    for bk = [11:15]
%         fprintf('\n\n %3.0f %3.0f; %3.0f', mean(rtmean{1}(:,bk-16)), mean(rtmean{comp}(:,bk)), (mean(rtmean{1}(:,bk-16)) - mean(rtmean{comp}(:,bk))));
        mu1 = mean(rtmean{2}(:,bk));
        mu2 = mean(rtmean{comp}(:,bk));
        sd1 = std(rtmean{2}(:,bk));
        sd2 = std(rtmean{comp}(:,bk));
        n1 = length(rtmean{2}(:,bk));
        n2 = length(rtmean{comp}(:,bk));
        sdd = sqrt( ((n1-1)*sd1^2 + (n2-1)*sd2^2)/(n1+n2+2) * (1/n1 + 1/n2) ) ;
        t = (mu1-mu2)/sdd;
        fprintf('\t%1.2f', t)
        if(cdf('T', t, (n1+n2-2)) > .95)
            fprintf('*');
        end
        
% %         y = mean([std(rtmean{comp}(:,bk))/sqrt(length(rtmean{comp}(:,bk))) std(rtmean{1}(:,bk-16))/sqrt(length(rtmean{1}(:,bk-16)))])
% %         [h p ci stats] = ttest2(rtmean{1}(:,bk-16), rtmean{comp}(:,bk));
% %         fprintf('\t%2.3f', stats.tstat);
% %         if(p<.05)
% %             fprintf('*');
% %         end
    end
end

%%

for sids = [1:20]
    for f1 = [1:2]
        for f2 = [1:5]
            C{